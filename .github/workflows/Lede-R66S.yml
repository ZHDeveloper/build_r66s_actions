name: R66S OpenWrt Build

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 18 * * *
  push:
    branches:
      - main
    paths:
      - 'configs/r66s.config'
      - 'scripts/**'
      - '.github/workflows/Lede-R66S.yml'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/r66s.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Combine Disks
      run: |
        echo "合并磁盘空间以获得更大的可用空间"
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
        export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
        export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
        sudo fallocate -l $ROOT_LOOP_BYTES /tmp/root.img || sudo dd if=/dev/zero of=/tmp/root.img bs=1024 count=$ROOT_LOOP_KB
        export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /tmp/root.img)
        sudo pvcreate -f $ROOT_LOOP_DEVNAME
        export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
        export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
        export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
        sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img || sudo dd if=/dev/zero of=/mnt/mnt.img bs=1024 count=$MNT_LOOP_KB
        export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
        sudo pvcreate -f $MNT_LOOP_DEVNAME
        sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
        sudo lvcreate -n lvstorage -l +100%FREE vgstorage
        export LV_DEVNAME=$(sudo lvdisplay | awk '/LV Path/{print $3}')
        sudo mkfs.ext4 -L combinedisk $LV_DEVNAME
        sudo mount $LV_DEVNAME /tmp/combined
        sudo chown runner:runner /tmp/combined
        sudo chmod 755 /tmp/combined
        echo "/tmp/combined 磁盘合并完成"
        df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "开始初始化编译环境"
        # 显示系统信息
        echo "当前磁盘使用情况:"
        df -hT
        echo "当前内存使用情况:"
        free -h
        
        # 清理 Docker 相关
        echo "清理 Docker 镜像和容器..."
        docker system prune -a -f || true
        docker rmi $(docker images -q) 2>/dev/null || true
        
        # 清理系统缓存和临时文件
        echo "清理系统缓存..."
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/* /var/tmp/* || true
        
        # 删除不需要的大型软件包和目录
        echo "删除不需要的软件包..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
        sudo rm -rf /usr/local/share/boost /usr/local/graalvm /usr/local/share/chromium
        sudo rm -rf /usr/local/share/powershell /usr/local/share/vcpkg /usr/local/lib/node_modules
        sudo rm -rf /usr/share/swift /usr/local/.ghcup /home/linuxbrew
        sudo rm -rf /etc/apt/sources.list.d/* $AGENT_TOOLSDIRECTORY || true
        
        # 卸载不需要的软件包
        echo "卸载不需要的软件包..."
        sudo -E apt-get -y purge azure-cli* ghc* zulu* llvm* firefox google* dotnet* powershell* \
          openjdk* mongodb* moby* snapd* php* mysql* postgresql* apache2* nginx* || true
        
        # 更新软件包列表
        echo "更新软件包列表..."
        sudo -E apt-get -qq update
        
        # 安装编译依赖
        echo "安装编译依赖..."
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils \
          bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar \
          flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool \
          libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
          libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool \
          lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
          python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion \
          swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev clang rename
        
        # 系统清理和优化
        echo "系统清理和优化..."
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo -E apt-get -y autoclean
        
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        
        # 创建工作目录
        echo "创建工作目录..."
        if [ -d "/tmp/combined" ]; then
          sudo mkdir -p /tmp/combined/workdir
          sudo chown -R $USER:$GROUPS /tmp/combined/workdir
          ln -sf /tmp/combined/workdir /workdir
        else
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
        fi
        
        echo "环境初始化完成"
        echo "最终磁盘使用情况:"
        df -hT

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH && $DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Clean up build directories
      if: (!cancelled())
      run: |
        cd openwrt
        rm -rf build_dir tmp
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get clean
        df -hT

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
